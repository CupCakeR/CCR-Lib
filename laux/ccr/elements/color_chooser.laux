
CCR:GenerateFont("CCR.ColorChooser.Label", nil, 20)
CCR:GenerateFont("CCR.ColorChooser.RGB", "SemiBold", 20)

local PANEL = {}

CCR:AccessorFunc(PANEL, "cvar", "ConVar")

CCR:AccessorFunc(PANEL, "text", "Text", "String")
CCR:AccessorFunc(PANEL, "font", "Font", "String")
CCR:AccessorFunc(PANEL, "color_text", "TextColor", "Color")
CCR:AccessorFunc(PANEL, "color", "Color", "Color")
CCR:AccessorFunc(PANEL, "preview_color", "PreviewColor", "Boolean")

function PANEL:Init()
	self.text = "Undefined"
	self.font = "CCR.ColorChooser.Label"
	self.color_text = color_white
	self.preview_color = true

	self.color = Color(255, 255, 255)
end

function PANEL:SetColor(clr)
	self.color = Color(clr.r, clr.g, clr.b, clr.a)
end

local matGradientR = Material("vgui/gradient-r")
function PANEL:PostInit()
	self.label = CCR:NewElement("DLabel", self)
	self.label:SetText(self.text)
	self.label:SetFont(self.font)
	self.label:SetTextColor(self.color_text)
	self.label:SetContentAlignment(5)
	self.label:SizeToContents()

	local funcChange = (pnl, key, value = "") =>
		value = tonumber(value)
		assert(value)
		self.color[key] = value
		self:OnColorChanged(Color(self.color.r, self.color.g, self.color.b, self.color.a))
	end
	
	self.container = CCR:NewElement("Panel", self)

	do
		local function createPopup(parent, key, clr)
			parent:SetCursor("blank")

			local pnl = CCR:NewElement("Panel")
			pnl:SetSize(128, 25)
			pnl:SetDrawOnTop(true)
			pnl:MouseCapture(true)
			pnl.Paint = (_s, w, h) =>
				CCR:RoundedBox(0, 0, w, h, clr)
				CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().Background)

				DisableClipping(true)
					surface.SetDrawColor(clr)
					surface.DrawLine(w / 2, h, w / 2, h + 4)
				DisableClipping(false)

				surface.SetDrawColor(clr)
				surface.SetMaterial(matGradientR)
				surface.DrawTexturedRect(16, h / 2 - 1, w - 32, 2)

				local frac = parent.value / 255
				frac = math.Clamp(frac, 0, 1)

				local x = w - 32
				x = 16 + x * frac
				CCR:DrawCircle(x, h / 2, 5, color_white)
			end

			pnl.parent = parent
			pnl.Think = (s) =>
				if (!IsValid(s.parent)) then
					s:Remove()
					return
				end

				s:SetCursor("blank")
				s:PosToParent()
			end
			pnl.PosToParent = (s) =>
				local w, h = s.parent:GetSize()
				local x, y = s.parent:LocalToScreen(0, 0)
				s:SetPos(x + w / 2 - s:GetWide() / 2, y - 4 - s:GetTall())
			end
			pnl:PosToParent()

			pnl.startX = pnl:LocalCursorPos() - pnl:GetPos()
			pnl.startValue = parent.value
			pnl.frameNum = FrameNumber()
			pnl.OnCursorMoved = (s, x, y) =>
				stopif (s.frameNum == FrameNumber()) -- NOTE: Workaround to compensate that the cursor calc is off by 1 frame
				parent.value = math.Clamp(s.startValue + (-(s.startX - x)), 0, 255)
				funcChange(parent, key, parent.value)

				local x, y = input.GetCursorPos()
				local min = s.origCursorPos.x - s.startValue
				local max = s.origCursorPos.x + (255 - s.startValue)

				if (x < min) then
					input.SetCursorPos(min, s.origCursorPos.y)
				end

				if (x > max) then
					input.SetCursorPos(max, s.origCursorPos.y)
				end
			end

			pnl.origCursorPos = {
				x = select(1, input.GetCursorPos()),
				y = select(2, input.GetCursorPos())
			}
			pnl.OnRemove = (s) =>
				input.SetCursorPos(s.origCursorPos.x, s.origCursorPos.y)
			end

			parent.popup = pnl
		end

		local function createChooser(key, color)
			local pnl = CCR:NewElement("Panel", self.container)
			pnl:SetSize(45, 28)
			pnl:SetCursor("hand")
			pnl.value = self.color[key] || 0
			pnl.Paint = (s, w, h) =>
				CCR:RoundedBox(0, 0, w, h, color)
				CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().PanelBackground)
				CCR:DrawText(s.value, "CCR.ColorChooser.RGB", w / 2, h / 2, grey(200), "c", "c")

				if (s.popup) then
					--local x, y = s:LocalToScreen(0, 0)
					--s.popup:PaintAt(x + w / 2 - s.popup:GetWide() / 2, y - s.popup:GetTall() - 4)
				end
			end
			pnl.OnMousePressed = (s, _key) =>
				stopif (_key != MOUSE_LEFT)
				createPopup(s, key, color)
			end
			pnl.OnMouseReleased = (s) =>
				if (IsValid(s.popup)) then
					s.popup:Remove()
					s.popup = nil
				end

				s:SetCursor("hand")
			end
			pnl.Think = (s) =>
				if (IsValid(s.popup)) then
					if (!input.IsMouseDown(MOUSE_LEFT)) then
						s:OnMouseReleased(MOUSE_LEFT)
					end
				end
			end

			return pnl
		end

		local r = createChooser("r", CCR:ThemeColors().Red)
		local g = createChooser("g", CCR:ThemeColors().Green)
		g:MoveRightOf(r, 4)
		local b = createChooser("b", CCR:ThemeColors().Blue)
		b:MoveRightOf(g, 4)
		local a = createChooser("a", color_white)
		a:MoveRightOf(b, 4)

	end

	self.container.PerformLayout = (s, w, h) =>
		s:SizeToChildren(true, true)
	end

	-- self.textEntry = CCR:NewElement("TextEntry", self)
	-- self.textEntry.PerformLayout = (s, w, h) =>
	-- 	local tw, th = CCR:GetTextSize("FFFFFF", s.textentry:GetFont())
	-- 	local l, t, r, b = s.textentry:GetDockMargin()
	-- 	print(l, t, r, b)
	-- 	s:SetSize(tw + l + r, th + t + b)
	-- end

	if (self:GetPreviewColor()) then
		self.preview = CCR:NewElement("Panel", self)
		self.preview.Paint = (s, w, h) =>
			CCR:DrawCircle(h / 2, h / 2, h / 2, self.color)
		end
	end

	self.container:InvalidateLayout(true)
	self:InvalidateLayout(true)
end

function PANEL:OnColorChanged(clr) end

function PANEL:GetConVarObject()
	return GetConVar(self:GetConVar())
end

function PANEL:PerformLayout(w, h)
	self.label:CenterVertical()
	self.container:SetPos(w - self.container:GetWide())
	
	if (IsValid(self.preview)) then
		local tall = self.container:GetTall()
		self.preview:SetSize(tall, tall)
		self.preview:MoveLeftOf(self.container, 8)
	end

	self:SizeToChildren(true, true)
end

function PANEL:Paint(w, h)
end

CCR:RegisterElement("ColorChooser", PANEL, "Panel")