
CCR:GenerateFont("CCR.ColorChooser.Label", nil, 20)
CCR:GenerateFont("CCR.ColorChooser.RGB", "SemiBold", 20)

local PANEL = {}

CCR:AccessorFunc(PANEL, "cvar", "ConVar")

CCR:AccessorFunc(PANEL, "text", "Text", "String")
CCR:AccessorFunc(PANEL, "font", "Font", "String")
CCR:AccessorFunc(PANEL, "color_text", "TextColor", "Color")
CCR:AccessorFunc(PANEL, "color", "Color", "Color")
CCR:AccessorFunc(PANEL, "preview_color", "PreviewColor", "Boolean")

function PANEL:Init()
	self.text = "Undefined"
	self.font = "CCR.ColorChooser.Label"
	self.color_text = color_white
	self.preview_color = true

	self.color = Color(255, 255, 255)
end

function PANEL:SetColor(clr)
	self.color = Color(clr.r, clr.g, clr.b, clr.a)
end

local matGradientR = Material("vgui/gradient-r")
function PANEL:PostInit()
	self.label = CCR:NewElement("DLabel", self)
	self.label:SetText(self.text)
	self.label:SetFont(self.font)
	self.label:SetTextColor(self.color_text)
	self.label:SetContentAlignment(5)
	self.label:SizeToContents()

	local funcChange = (pnl, key, value = "") =>
		value = tonumber(value)
		assert(value)
		self.color[key] = value
		self:OnColorChanged(Color(self.color.r, self.color.g, self.color.b, self.color.a))
	end
	
	self.container = CCR:NewElement("Panel", self)

		local function createPopup(parent, key, clr)
			local pnl = CCR:NewElement("Panel", parent)
			pnl:SetSize(128, 25)
			pnl:SetPos(0, 0)
			pnl:SetZPos(1488)
			pnl:SetPaintedManually(true)
			pnl:MouseCapture(true)
			pnl.Paint = (_s, w, h) =>
				CCR:RoundedBox(0, 0, w, h, clr)
				CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().Background)

				DisableClipping(true)
					surface.SetDrawColor(clr)
					surface.DrawLine(w / 2, h, w / 2, h + 4)
				DisableClipping(false)

				surface.SetDrawColor(clr)
				surface.SetMaterial(matGradientR)
				surface.DrawTexturedRect(16, h / 2 - 1, w - 32, 2)

				local frac = parent.value / 255
				frac = math.Clamp(frac, 0, 1)

				local x = w - 32
				x = 16 + x * frac
				CCR:DrawCircle(x, h / 2, 5, color_white)
			end

			pnl.startX = parent:LocalCursorPos()
			pnl.startValue = parent.value
			pnl.frameNum = FrameNumber()
			pnl.OnCursorMoved = (_s, x, y) =>
				stopif (_s.frameNum == FrameNumber()) -- NOTE: Workaround to compensate that the cursor calc is off by 1 frame
				parent.value = math.Clamp(_s.startValue + (-(_s.startX - x)), 0, 255)
				funcChange(s, key, parent.value)
			end

			parent.popup = pnl
		end

		local r = CCR:NewElement("Panel", self.container)
		r:SetSize(45, 28)
		r.value = self.color.r || 0
		r.Paint = (s, w, h) =>
			CCR:RoundedBox(0, 0, w, h, CCR:ThemeColors().Red)
			CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().PanelBackground)
			CCR:DrawText(s.value, "CCR.ColorChooser.RGB", w / 2, h / 2, grey(200), "c", "c")

			if (s.popup) then
				local x, y = s:LocalToScreen(0, 0)
				s.popup:PaintAt(x + w / 2 - s.popup:GetWide() / 2, y - s.popup:GetTall() - 4)
			end
		end
		r.OnMousePressed = (s, key) =>
			stopif (key != MOUSE_LEFT)
			createPopup(s, "r", CCR:ThemeColors().Red)
		end
		r.OnMouseReleased = (s) =>
			if (IsValid(s.popup)) then
				s.popup:Remove()
				s.popup = nil
			end
		end
		r.Think = (s, b) =>
			if (IsValid(s.popup) && !input.IsMouseDown(MOUSE_LEFT)) then
				s:OnMouseReleased(MOUSE_LEFT)
			end
		end


		local g = CCR:NewElement("Panel", self.container)
		g:SetSize(45, 28)
		g:MoveRightOf(r, 4)
		g.value = self.color.g || 0
		g.Paint = (s, w, h) =>
			CCR:RoundedBox(0, 0, w, h, CCR:ThemeColors().Green)
			CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().PanelBackground)
			CCR:DrawText(s.value, "CCR.ColorChooser.RGB", w / 2, h / 2, grey(200), "c", "c")

			if (s.popup) then
				local x, y = s:LocalToScreen(0, 0)
				s.popup:PaintAt(x + w / 2 - s.popup:GetWide() / 2, y - s.popup:GetTall() - 4)
			end
		end
		g.OnMousePressed = (s, key) =>
			stopif (key != MOUSE_LEFT)
			createPopup(s, "g", CCR:ThemeColors().Green)
		end
		g.OnMouseReleased = (s) =>
			if (IsValid(s.popup)) then
				s.popup:Remove()
				s.popup = nil
			end
		end
		g.Think = (s, b) =>
			if (IsValid(s.popup) && !input.IsMouseDown(MOUSE_LEFT)) then
				s:OnMouseReleased(MOUSE_LEFT)
			end
		end


		local b = CCR:NewElement("Panel", self.container)
		b:SetSize(45, 28)
		b:MoveRightOf(g, 4)
		b.value = self.color.b || 0
		b.Paint = (s, w, h) =>
			CCR:RoundedBox(0, 0, w, h, CCR:ThemeColors().Blue)
			CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().PanelBackground)
			CCR:DrawText(s.value, "CCR.ColorChooser.RGB", w / 2, h / 2, grey(200), "c", "c")

			if (s.popup) then
				local x, y = s:LocalToScreen(0, 0)
				s.popup:PaintAt(x + w / 2 - s.popup:GetWide() / 2, y - s.popup:GetTall() - 4)
			end
		end
		b.OnMousePressed = (s, key) =>
			stopif (key != MOUSE_LEFT)
			createPopup(s, "b", CCR:ThemeColors().Blue)
		end
		b.OnMouseReleased = (s) =>
			if (IsValid(s.popup)) then
				s.popup:Remove()
				s.popup = nil
			end
		end
		b.Think = (s, b) =>
			if (IsValid(s.popup) && !input.IsMouseDown(MOUSE_LEFT)) then
				s:OnMouseReleased(MOUSE_LEFT)
			end
		end

		local a = CCR:NewElement("Panel", self.container)
		a:SetSize(45, 28)
		a:MoveRightOf(b, 4)
		a.value = self.color.a || 0
		a.Paint = (s, w, h) =>
			CCR:RoundedBox(0, 0, w, h, color_white)
			CCR:RoundedBox(1, 1, w - 2, h - 2, CCR:ThemeColors().PanelBackground)
			CCR:DrawText(s.value, "CCR.ColorChooser.RGB", w / 2, h / 2, grey(200), "c", "c")

			if (s.popup) then
				local x, y = s:LocalToScreen(0, 0)
				s.popup:PaintAt(x + w / 2 - s.popup:GetWide() / 2, y - s.popup:GetTall() - 4)
			end
		end
		a.OnMousePressed = (s, key) =>
			stopif (key != MOUSE_LEFT)
			createPopup(s, "a", CCR:ThemeColors().Blue)
		end
		a.OnMouseReleased = (s) =>
			if (IsValid(s.popup)) then
				s.popup:Remove()
				s.popup = nil
			end
		end
		a.Think = (s, b) =>
			if (IsValid(s.popup) && !input.IsMouseDown(MOUSE_LEFT)) then
				s:OnMouseReleased(MOUSE_LEFT)
			end
		end

	self.container.PerformLayout = (s, w, h) =>
		s:SizeToChildren(true, true)
	end

	-- self.textEntry = CCR:NewElement("TextEntry", self)
	-- self.textEntry.PerformLayout = (s, w, h) =>
	-- 	local tw, th = CCR:GetTextSize("FFFFFF", s.textentry:GetFont())
	-- 	local l, t, r, b = s.textentry:GetDockMargin()
	-- 	print(l, t, r, b)
	-- 	s:SetSize(tw + l + r, th + t + b)
	-- end

	if (self:GetPreviewColor()) then
		self.preview = CCR:NewElement("Panel", self)
		self.preview.Paint = (s, w, h) =>
			CCR:DrawCircle(h / 2, h / 2, h / 2, self.color)
		end
	end

	self.container:InvalidateLayout(true)
	self:InvalidateLayout(true)
end

function PANEL:OnColorChanged(clr) end

function PANEL:GetConVarObject()
	return GetConVar(self:GetConVar())
end

function PANEL:PerformLayout(w, h)
	self.label:CenterVertical()
	self.container:SetPos(w - self.container:GetWide())
	
	if (IsValid(self.preview)) then
		local tall = self.container:GetTall()
		self.preview:SetSize(tall, tall)
		self.preview:MoveLeftOf(self.container, 8)
	end

	self:SizeToChildren(true, true)
end

function PANEL:Paint(w, h)
end

CCR:RegisterElement("ColorChooser", PANEL, "Panel")