
-- // TODO: Fully port to CCR
-- // TODO: Make text fully optional to be able just to use the element itself (slider)
-- // TODO: Use DrawArc instead of trash material

CCR:GenerateFont("CCR.NumSlider.Label", nil, 20)

local PANEL = {}

CCR:AccessorFunc(PANEL, "cvar", "ConVar")
CCR:AccessorFunc(PANEL, "value", "Value")
CCR:AccessorFunc(PANEL, "min", "Min")
CCR:AccessorFunc(PANEL, "max", "Max")
CCR:AccessorFunc(PANEL, "decimals", "Decimals")
CCR:AccessorFunc(PANEL, "slider_width", "SliderWidth")
CCR:AccessorFunc(PANEL, "circle_color", "CircleColor")

CCR:AccessorFunc(PANEL, "text", "Text")
CCR:AccessorFunc(PANEL, "text_color", "TextColor")
CCR:AccessorFunc(PANEL, "font", "Font")

function PANEL:Init()
	self.text = "Undefined"
	self.text_color = color_white
	self.value = 0
	self.min = 0
	self.max = 0
	self.decimals = 0
	self.circle_color = color_white
	self.slider_width = 200
end

function PANEL:PostInit()
	self.label = self:Add("DLabel")
	self.label:SetText(self.text)
	self.label:SetFont(self.font or "CCR.NumSlider.Label")
	self.label:SetColor(self.text_color || color_white)
	self.label:SetAlpha(255)
	self.label:Dock(LEFT)
	self.label:SizeToContents()

	self.display = self:Add("DLabel")
	self.display:SetText(self:GetValue())
	self.display:SetTextColor(rgb(200, 200, 200))
	self.display:SetFont("CCR.NumSlider.Label")
	self.display.Paint = function(s, w, h)
		surface.DisableClipping(true)
			draw.RoundedBox(6, -4, -2, w + 8, h + 4, CCR:ThemeColors().Background)
		surface.DisableClipping(false)
	end

	self.slider = self:Add("DPanel")
	self.slider:SetCursor("hand")
	self.slider:SetSize(self.slider_width, 20)
	self.slider.min = self:GetMin()
	self.slider.max = self:GetMax()
	self.slider.decimals = self:GetDecimals()
	self.slider.Paint = function(s, w, h)
		surface.SetDrawColor(CCR:ThemeColors().Primary)
		surface.DrawLine(h / 2, h / 2, w - (h / 2), h / 2)

		local frac = math.Clamp((self.value - s.min) / (s.max - s.min), 0, 1)
		local pos = Lerp(frac, h, w - h)
		CCR:DrawCircle(pos, h / 2, h / 2, grey(128))

		if s.focus then
			if !input.IsButtonDown(MOUSE_LEFT) then
				s.focus = false
				return
			end

			local mx, _ = s:CursorPos()
			mx = math.Clamp(mx, 0, w)
			self:SetValue(Lerp(mx / w, s.min, s.max))
		end
	end
	self.slider.OnMousePressed = function(s, key)
		s.focus = true
	end

	stopif (!self:GetConVar())
	self:SetValue(GetConVar(self:GetConVar()):GetFloat(), true)
end

function PANEL:SetValue(val, prevent)
	self._last_value = self.value

	val = math.Round(val, self:GetDecimals())
	val = math.Clamp(val, self:GetMin(), self:GetMax())

	self.value = val

	stopif (self.value == self._last_value)

	if IsValid(self.display) then
		self.display:SetText(self:GetValue())
		self.display:SizeToContents()
	end

	if !prevent then
		self:OnValueChanged(val)
	end

	stopif (!self:GetConVar())
	GetConVar(self:GetConVar()):SetFloat(self.value)
end

function PANEL:SetMin(min)
	self.min = min

	if min > self:GetValue() then
		self:SetValue(min)
	end
end

function PANEL:SetMax(max)
	self.max = max

	if max < self:GetValue() then
		self:SetValue(max)
	end
end

function PANEL:OnValueChanged(val) end

function PANEL:PerformLayout(w, h)
	stopif (!self.slider) -- Dock calls this too early

	self.slider:SetPos(w - self.slider:GetWide())
	self.slider:CenterVertical()

	self.display:SizeToContents()
	self.display:CenterVertical()
	self.display:MoveLeftOf(self.slider, 8)

	self.label:CenterVertical()

	self:SizeToChildren(true, true)
end

function PANEL:Paint(w, h)
end

CCR:RegisterElement("NumSlider", PANEL, "Panel")