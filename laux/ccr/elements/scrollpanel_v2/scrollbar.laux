
-- smooth scrolling yoinked with permissions from moat ttt
-- COPYRIGHT: https://github.com/colemclaren/ttt/blob/cbbec16baa7c3de3e913185fa008e9e8fd3e2742/addons/moat_addons/lua/plugins/moat/modules/inv2/client/cl_inv.lua#L1274-L1313

--[[

	DVScrollBar

	Usage:

	Place this control in your panel. You will ideally have another panel or
		control which is bigger than the original panel. This is the Canvas.

	scrollbar:SetUp( _barsize_, _canvassize_ ) should be called whenever
		the size of your 'canvas' changes.

	scrollbar:GetOffset() can be called to get the offset of the canvas.
		You should call this in your PerformLayout function and set the Y
		pos of your canvas to this value.

	Example:

	function PANEL:PerformLayout()

		local Wide = self:GetWide()
		local YPos = 0

		-- Place the scrollbar
		self.VBar:SetPos( self:GetWide() - 16, 0 )
		self.VBar:SetSize( 16, self:GetTall() )

		-- Make sure the scrollbar knows how big our canvas is
		self.VBar:SetUp( self:GetTall(), self.pnlCanvas:GetTall() )

		-- Get data from the scrollbar
		YPos = self.VBar:GetOffset()

		-- If the scrollbar is enabled make the canvas thinner so it will fit in.
		if ( self.VBar.Enabled ) then Wide = Wide - 16 end

		-- Position the canvas according to the scrollbar's data
		self.pnlCanvas:SetPos( self.Padding, YPos + self.Padding )
		self.pnlCanvas:SetSize( Wide - self.Padding * 2, self.pnlCanvas:GetTall() )

	end

--]]

local PANEL = {}

function PANEL:Init()
	self.Offset = 0
	self.Scroll = 0
	self.CanvasSize = 1
	self.BarSize = 1
	self.CanScroll = false -- tall enough to scroll (_canvassize_ > _barsize_)
	self.LerpTarget = 0

	self.btnGrip = vgui.Create( "DScrollBarGrip", self )
	self.btnGrip.Paint = (s, w, h) =>
		stopif (!self.CanScroll)
		CCR:CustomRoundedBox(4, 0, 0, w, h, CCR:GetThemeColors().Highlight, true, true, true, true)
	end

	self:SetSize( 10, 15 )
end

function PANEL:SetEnabled( b )
	if ( !b ) then

		self.Offset = 0
		self:SetScroll( 0 )
		self.HasChanged = true

	end

	self:SetMouseInputEnabled( b )
	self:SetVisible( b )

	-- We're probably changing the width of something in our parent
	-- by appearing or hiding, so tell them to re-do their layout.
	if ( self.Enabled != b ) then

		self:GetParent():InvalidateLayout()

		if ( self:GetParent().OnScrollbarAppear ) then
			self:GetParent():OnScrollbarAppear()
		end

	end

	self.Enabled = b
end

function PANEL:Value()
	return self.Pos
end

function PANEL:BarScale()
	if ( self.BarSize == 0 ) then return 1 end

	return self.BarSize / ( self.CanvasSize + self.BarSize )
end

function PANEL:SetUp( _barsize_, _canvassize_ )
	self.BarSize = _barsize_
	self.CanvasSize = math.max( _canvassize_ - _barsize_, 0 )

	-- self:SetEnabled( _canvassize_ > _barsize_ )
	self:SetEnabled(true)

	self.CanScroll = _canvassize_ > _barsize_

	self:InvalidateLayout()
end

function PANEL:OnMouseWheeled( dlta )
	if ( !self:IsVisible() ) then return false end
	if ( !self.CanScroll ) then return false end

	-- We return true if the scrollbar changed.
	-- If it didn't, we feed the mousehweeling to the parent panel

	return self:AddScroll( dlta * -2 )
end

function PANEL:AddScroll(dlta)
	local OldScroll = self.LerpTarget or self:GetScroll()

	dlta = dlta * 50

	self.LerpTarget = math.Clamp(self.LerpTarget + dlta, -self.btnGrip:GetTall(), self.CanvasSize + self.btnGrip:GetTall())
	return OldScroll != self:GetScroll()
end

function PANEL:Think()
	stopif (self.in_animate)

	local frac = FrameTime() * 5

	frac = FrameTime() * 10

	local newpos = Lerp(frac, self:GetScroll(), self.LerpTarget)
	newpos = math.Clamp(newpos, 0, self.CanvasSize)

	self:SetScroll(newpos, true)

	if (self.LerpTarget < 0 and self:GetScroll() == 0) then
		self.LerpTarget = 0
	end

	if (self.LerpTarget > self.CanvasSize and self:GetScroll() == self.CanvasSize) then
		self.LerpTarget = self.CanvasSize
	end

	local p = self:GetParent()
	if (IsValid(p)) then
		p.Scroll = newpos
	end
end

function PANEL:SetScroll( scrll, keep_smooth )
	if ( !self.Enabled ) then self.Scroll = 0 return end

	if (!keep_smooth) then
		self.LerpTarget = scrll
	end

	self.Scroll = math.Clamp( scrll, 0, self.CanvasSize )

	self:InvalidateLayout()

	-- If our parent has a OnVScroll function use that, if
	-- not then invalidate layout (which can be pretty slow)

	local func = self:GetParent().OnVScroll
	if ( func ) then
		func( self:GetParent(), self:GetOffset() )
	else
		self:GetParent():InvalidateLayout()
	end
end

function PANEL:AnimateTo( scrll, length, delay, ease )
	local anim = self:NewAnimation( length, delay, ease, (anim, pnl) =>
		pnl.in_animate = nil
	end )
	anim.StartPos = self.Scroll
	anim.TargetPos = scrll
	anim.Think = function( anim, pnl, fraction )
		pnl.in_animate = true
		pnl:SetScroll( Lerp( fraction, anim.StartPos, anim.TargetPos ) )
	end
end

function PANEL:GetScroll()
	if ( !self.Enabled || !self.CanScroll ) then self.Scroll = 0 end
	return self.Scroll
end

function PANEL:GetOffset()
	if ( !self.Enabled || !self.CanScroll ) then return 0 end
	return self.Scroll * -1
end

function PANEL:OnMousePressed()
	local _, y = self:CursorPos()
	if ( y > self.btnGrip.y ) then
		self:AddScroll(1)
	else
		self:AddScroll(-1)
	end
end

function PANEL:OnMouseReleased()
	self.Dragging = false
	self.DraggingCanvas = nil
	self:MouseCapture( false )

	self.btnGrip.Depressed = false
end

function PANEL:OnCursorMoved( x, y )
	if ( !self.CanScroll ) then return end
	if ( !self.Enabled ) then return end
	if ( !self.Dragging ) then return end

	local x, y = self:ScreenToLocal( 0, gui.MouseY() )

	-- Uck.
	y = y - self.HoldPos
	y = y / (self:GetTall() - self.btnGrip:GetTall())

	self:SetScroll( y * self.CanvasSize )
end

function PANEL:Grip()
	if ( !self.Enabled ) then return end
	if ( !self.CanScroll ) then return end
	if ( self.BarSize == 0 ) then return end

	self:MouseCapture( true )
	self.Dragging = true

	local x, y = self.btnGrip:ScreenToLocal( 0, gui.MouseY() )
	self.HoldPos = y

	self.btnGrip.Depressed = true
end

function PANEL:PerformLayout()
	local Wide = self:GetWide()
	local Scroll = self:GetScroll() / self.CanvasSize
	local BarSize = math.max( self:BarScale() * ( self:GetTall() ), 10 )
	local Track = self:GetTall() - BarSize
	Track = Track + 1

	Scroll = Scroll * Track

	self.btnGrip:SetPos( 0, Scroll )
	self.btnGrip:SetSize( Wide, BarSize )
end

function PANEL:Paint(w, h)
	CCR:CustomRoundedBox(4, 0, 0, w, h, CCR:GetThemeColors().Navbar, true, true, true, true)
end

CCR:RegisterElement("DVScrollBarV2", PANEL, "Panel")