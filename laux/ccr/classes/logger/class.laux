
public class CCR.ConsoleLogger
	static COLORS = {
		["error"] =		Color(255, 0, 0),
		["warning"] =	Color(241, 196, 15),
		["log"] =		Color(52, 152, 219),
		["debug"] =		Color(200, 200, 200),
		["success"] =	Color(0, 255, 0),
	}

	constructor(prefix, config)
		CCR:AccessorFunc(self, "prefix", "Prefix", "String", false, "Undefined")
		CCR:AccessorFunc(self, "config", "Config", "Table", false, {
			log = true,
			debug = true,
			error = true,
			warning = true,
			success = true,
		})

		self.prefix = prefix || self.prefix
		self.config = config || self.config
	end

	__tostring()
		return `CCR.Logger[${self.prefix}]`
	end

	print(...)
		local args = {}
		for _, var in ipairs({...}) do
			table.insert(args, var)
		end

		table.insert(args, "\n")
		
		MsgC(color_white, `(${self.prefix})`, grey(200), " > ", color_white, unpack(args))
	end

	Error(...)
		stopif (!self.config.error)
		self:print(CCR.ConsoleLogger["COLORS"].error, "Error: ", color_white, ...)
	end

	Warning(...)
		stopif (!self.config.warning)
		self:print(CCR.ConsoleLogger["COLORS"].warning, "Warning: ", color_white, ...)
	end

	Log(...)
		stopif (!self.config.log)
		self:print(CCR.ConsoleLogger["COLORS"].log, "Log: ", color_white, ...)
	end

	Debug(...)
		stopif (!self.config.debug)
		self:print(CCR.ConsoleLogger["COLORS"].debug, "Debug: ", color_white, ...)
	end

	Success(...)
		stopif (!self.config.success)
		self:print(CCR.ConsoleLogger["COLORS"].success, "Success: ", color_white, ...)
	end

	error = self.Error
	warning = self.Warning
	log = self.Log
	debug = self.Debug
	success = self.Success
end

CCR.Logger = CCR.ConsoleLogger("CCR")