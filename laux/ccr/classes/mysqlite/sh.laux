
-- Just a simple class which is meant to hold values and verify their type on input
-- TODO: laux public class

local CLASS = {}
CLASS.__index = CLASS

CCR:AccessorFunc(CLASS, "name", "Name", "String")
CCR:AccessorFunc(CLASS, "config", "Config", "Table")
CCR:AccessorFunc(CLASS, "connection", "Connection")
CCR:AccessorFunc(CLASS, "initialized", "Initialized", "Boolean")

CLASS.Conn = CLASS.GetConnection

function CLASS.new()
	local _self = setmetatable({}, CLASS)
	_self.initialized = false

	_self.CCR_CLASSNAME = "CCR.MySQLite"
	CCR:AddClassFunctions(_self)

	return _self
end

function CLASS:__tostring()
	return "CCR.MySQLite[" .. (self:GetName() or "Undefined") .. "]"
end

function CLASS:Initialize()
	assert(SERVER, "This is not supposed to be called clientside!")
	assert(self:GetName(), "No name set")
	assert(self:GetConfig(), "No config set")
	assert(!self:GetInitialized(), "Already initialized")

	local p = CCR:NewPromise()

	-- Set global table which gets used in the module
	CCR_MYSQLITE_SETTINGS = {
		moduleName = "MySQLite_" .. self:GetName(),
		config = self:GetConfig()
	}

	CCR:IncludeFile("not_my_code/mysqlite", "sv")
	_G[CCR_MYSQLITE_SETTINGS.moduleName].initialize()

	self:AddHook(CCR_MYSQLITE_SETTINGS.moduleName .. ".DatabaseInitialized", function(s)
		local conn = _G["MySQLite_" .. self:GetName()]
		self:ExtendMySQLiteObject(conn)
		s:SetConnection(conn)
		p:resolve(s:GetConnection())
	end)

	-- Clear
	CCR_MYSQLITE_SETTINGS = nil
	self.initialized = true

	return p
end

function CLASS:ExtendMySQLiteObject(obj)
	obj.pQuery = function(query)
		local p = CCR:NewPromise()

		obj.query(query, function(data)
			p:resolve(data)
		end, CCR.PromiseError)

		return p
	end

	obj.pQueryValue = function(query)
		local p = CCR:NewPromise()

		obj.queryValue(query, function(data)
			p:resolve(data)
		end, CCR.PromiseError)

		return p
	end

	obj.pQueueQuery = function(query)
		local p = CCR:NewPromise()

		obj.queueQuery(query, function(data)
			p:resolve(data)
		end, CCR.PromiseError)

		return p
	end

	obj.pCommit = function()
		local p = CCR:NewPromise()

		obj.commit(query, function()
			p:resolve()
		end, CCR.PromiseError)

		return p
	end
end

function CCR:NewMySQLite()
	return CLASS.new()
end