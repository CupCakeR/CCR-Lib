
public class CCR.Currency
	_get id

	constructor(id)
		assert(id)
		self.id = id
	end

	__tostring()
		return `CCR.Currency[${self.id}]`
	end

	set(p, amt) error("not implemented") end
	add(p, amt) error("not implemented") end
	get(p) error("not implemented") end
	canAfford(p, amt) error("not implemented") end
	format(amt) error("not implemented") end

	register(override)
		CCR:RegisterCurrency(self, override)
		return self
	end
end

--

CCR.Currencies ||= {}

function CCR:GetCurrency(id)
	return self.Currencies[id]
end

function CCR:RegisterCurrency(currency, override)
	assert(currency.id, "Currency has no ID")

	if (!override && self.Currencies[currency.id]) then
		self.Logger:Warning(`Currency with ID ${currency.id} already exists, skipping...`)
		return
	end

	self.Currencies[currency.id] = currency
end

-- 

function CCR:LoadCustomCurrencies()
	local path = "ccr/custom/currencies/"
	local files = file.Find(path .. "*.lua", "LUA")

	for i, file in ipairs(files) do
		if (SERVER) then
			AddCSLuaFile(path .. file)
		end

		local obj = include(path .. file)
		
		if (!obj) then
			self.Logger:Error(`Custom currency file "${file}" did not return a valid currency object`)
			continue
		end

		if (CCR:GetCurrency(obj:getId())) then
			self.Logger:Warning(`Custom currency "${obj.id}" was already registered, overwriting..`)
		end

		self:RegisterCurrency(obj, true)
		
		self.Logger:Log(`Custom currency "${obj.id}" loaded and registered`)
	end
end