
local validators = {}

class Table extends CCR.Config.FieldValidator
	__type() end

	static id = "table"
	static validate(value)
		local _type = type(value)
		assert(istable(value), `expected value to be of type "table", got "${_type}"`)
	end
end
validators["table"] = Table

class Array extends CCR.Config.FieldValidator
	__type() end

	static id = "array"
	static validate(value)
		local _type = type(value)
		assert(istable(value), `expected value to be of type "table", got "${_type}"`)
		assert(table.IsSequential(value), `expected value to be a sequential table (array)`)
	end
end
validators["array"] = Array

class Boolean extends CCR.Config.FieldValidator
	__type() end

	static id = "boolean"
	static validate(value)
		local _type = type(value)
		assert(isbool(value), `expected value to be of type "boolean", got "${_type}"`)
	end
end
validators["boolean"] = Boolean

class Number extends CCR.Config.FieldValidator
	__type() end

	static id = "number"
	static validate(value)
		local _type = type(value)
		assert(isnumber(value), `expected value to be of type "number", got "${_type}"`)
	end
end
validators["number"] = Number

class Integer extends CCR.Config.FieldValidator
	__type() end

	static id = "integer"
	static validate(value)
		local _type = type(value)
		assert(isnumber(value) && value == math.floor(value), `expected value to be of type "integer", got "${_type}"`)
	end
end
validators["integer"] = Integer

class String extends CCR.Config.FieldValidator
	__type() end

	static id = "string"
	static validate(value)
		local _type = type(value)
		assert(isstring(value), `expected value to be of type "string", got "${_type}"`)
	end
end
validators["string"] = String

class Entity extends CCR.Config.FieldValidator -- NOTE: why the fuck would we ever need this
	__type() end

	static id = "entity"
	static validate(value)
		local _type = type(value)
		assert(isentity(value), `expected value to be of type "entity", got "${_type}"`)
	end
end
validators["entity"] = Entity

class Vector extends CCR.Config.FieldValidator
	__type() end

	static id = "vector"
	static validate(value)
		local _type = type(value)
		assert(isvector(value), `expected value to be of type "vector", got "${_type}"`)
	end
end
validators["vector"] = Vector

class Angle extends CCR.Config.FieldValidator
	__type() end

	static id = "angle"
	static validate(value)
		local _type = type(value)
		assert(isangle(value), `expected value to be of type "angle", got "${_type}"`)
	end
end
validators["angle"] = Angle

class Material extends CCR.Config.FieldValidator
	__type() end

	static id = "material"
	static validate(value)
		local _type = type(value)
		assert(type(value) == "IMaterial", `expected value to be of type "IMaterial", got "${_type}"`)
	end
end
validators["material"] = Material

class Color extends CCR.Config.FieldValidator
	__type() end

	static id = "color"
	static validate(value)
		local _type = type(value)
		assert(IsColor(value), `expected value to be of type "color", got "${_type}"`)
	end
end
validators["color"] = Color

class Panel extends CCR.Config.FieldValidator -- NOTE: why the fuck would we ever need this
	__type() end

	static id = "panel"
	static validate(value)
		local _type = type(value)
		assert(ispanel(value), `expected value to be of type "panel", got "${_type}"`)
	end
end
validators["panel"] = Panel

class Function extends CCR.Config.FieldValidator
	__type() end

	static id = "function"
	static validate(value)
		local _type = type(value)
		assert(isfunction(value), `expected value to be of type "function", got "${_type}"`)
	end
end
validators["function"] = Function

-- specials

class DBConfig extends CCR.Config.FieldValidator
	__type() end

	static id = "db_config"
	static validate(value)
		local _type = type(value)
		assert(istable(value), `expected value to be of type "table" (db config), got "${_type}"`)

		assert(value.EnableMySQL != nil, `database config requires "EnableMySQL" field to be set`)
		assert(value.Host != nil, `database config requires "Host" field to be set`)
		assert(value.Username != nil, `database config requires "Username" field to be set`)
		assert(value.Password != nil, `database config requires "Password" field to be set`)
		assert(value.Database_name != nil, `database config requires "Database_name" field to be set`)
		assert(value.Database_port != nil, `database config requires "Database_port" field to be set`)
		assert(value.Preferred_module != nil, `database config requires "Preferred_module" field to be set`)
		assert(value.MultiStatements != nil, `database config requires "MultiStatements" field to be set`)
	end
end
validators["db_config"] = DBConfig

return validators