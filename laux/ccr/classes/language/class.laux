public class CCR.Language extends CCR.Base
	constructor(addonId, languageId)
		super()

		CCR:AccessorFunc(self, "addonId", "AddonID", "String")
		CCR:AccessorFunc(self, "languageId", "LanguageID", "String")
		CCR:AccessorFunc(self, "url", "URL", "String")
		CCR:AccessorFunc(self, "raw", "Raw", "Table")
		CCR:AccessorFunc(self, "phrases", "Phrases", "Table")
		CCR:AccessorFunc(self, "initialized", "Initialized", "Boolean")

		self.addonId = addonId
		self.languageId = languageId
		self.raw = {}
		self.phrases = {}
		self.initialized = false

		return self
	end

	__tostring()
		return `CCR.Language[${self.addonId}][${self.languageId}]`
	end

	IsValid()
		return CCR.AddonLanguages?[self.addonId]?[self.languageId] == self
	end

	Download()
		assert(self.addonId, "No addon id set")
		assert(self.languageId, "No language id set")

		local url = self.url
		url = url || `https://gitlab.com/CupCakeR/ccr-languages/raw/master/${self.addonId}/${self.languageId}.json`

		local promise = CCR.NewPromise()

		http.Fetch(url, (body, size, headers, code) =>
			if (body:sub(1, 15) == "<!DOCTYPE html>") then
				return promise:reject("Invalid response (body)")
			end

			local tbl = util.JSONToTable(body)
			if (!tbl) then
				return promise:reject("Invalid json")
			end

			promise:resolve(tbl)
		end)

		return promise
	end

	Queue()
		self:AddHook("CCR.DoInitializeLanguage", () ->
			self:Initialize()
		end)
	end

	Initialize(force = false)
		if (!force) then
			assert(!self.initialized, "Tried to initialize language object but it was already initialized.")
		end

		if (!CCR.CanInitializeLanguage) then
			return self:Queue()
		end

		self:Download():next((tbl) =>
			self:SetRaw(tbl)
			self:PreparePhrases()
			self:SetInitialized(true)

			hook.Run("CCR.OnLanguageInitialized", self, tbl)
		end, CCR.PromiseError)
	end

	PreparePhrases()
		assert(self:GetRaw(), "No phrases to prepare")

		local copy = table.Copy(self:GetRaw()["phrases"])
		local new = CCR.FlattenTable(copy, ".", true)

		self:SetPhrases(new)
	end

	GetPhrase(phrase, replacements, pluralizationValue)
		assert(phrase, "No phrase to translate")

		if (pluralizationValue) then
			local singular
			if (tonumber(pluralizationValue)) then
				singular = pluralizationValue == 1
			elseif (pluralizationValue == true) then
				singular = select(2, next(replacements)) == 1
			else
				error("Invalid pluralizationValue")
			end

			phrase ..= "."
			phrase ..= (singular && "singular" || "plural")
		end

		local str = self:GetPhrases()[phrase]
		if (!str && self:GetLanguageID() != "english") then
			-- TODO: Get english language and fallback
		end

		if (!str) then
			return `UNKNOWN: ${phrase}`
		end

		if (replacements) then
			for k, v in pairs(replacements) do
				str = str:Replace(`:${k}:`, v)
			end
		end

		return str
	end

	Register() end
end

function CCR:NewAddonLanguage(addonId, languageId)
	return CCR.Language(addonId, languageId)
end