
public class CCR.Language
	_get _set url -- direct url to json file
	_get _set baseUrl -- direct url to base json file
	_get _set logger

	_get rawJson
	_get raw -- contains the raw json returned (as table)
	_get phrases -- contains the flattened strings

	_get base

	--

	IsValid()
		if (self._parent) then
			return IsValid(self._parent)
		end

		return true
	end
	
	getLogger()
		return self.logger || CCR.Logger
	end

	--

	isReady()
		return self.phrases != nil
	end

	getPhrase(phrase, replacements, pluralizationValue)
		assert(self:isReady(), "called too early, not ready")
		assert(phrase, "no phrase to translate")

		if (pluralizationValue) then
			local singular
			if (tonumber(pluralizationValue)) then
				singular = pluralizationValue == 1
			elseif (pluralizationValue == true) then
				singular = select(2, next(replacements)) == 1
			else
				error("invalid pluralization value")
			end

			phrase ..= "."
			phrase ..= (singular && "singular" || "plural")
		end

		local str = self.phrases[phrase]
		if (!str) then
			return `UNKNOWN: ${phrase}`
		end

		if (replacements) then
			for k, v in pairs(replacements) do
				str = str:Replace(`:${k}:`, v)
			end
		end

		return str
	end

	--

	download()
		local promise = CCR.Promise()

		http.Fetch(self.url, (body, size, headers, code) =>
			if (code != 200) then
				self:getLogger():error(`i18n: http.Fetch failed with code ${code} - url: ${self.url}`)
				return promise:resolve()
			end

			local tbl = util.JSONToTable(body)
			if (!tbl) then
				self:getLogger():error(`i18n: invalid response body (not valid json) returned - url: ${self.url}`)
				return promise:resolve()
			end

			self.rawJson = body

			promise:resolve(tbl)
		end)

		return promise
	end

	loadFromCache()
		local promise = CCR.Promise()

		local crc = util.CRC(self.url)
		local cached = file.Read(`ccr/languages/${crc}.txt`, "DATA")

		if (cached) then
			local str = util.Base64Decode(cached) -- i really dont want anyone to play around with shit in /data
			local tbl = util.JSONToTable(str)

			if (tbl) then
				self.rawJson = str
				self.raw = tbl

				promise:resolve(tbl)
			else
				if (self._parent) then
					self:getLogger():error(`i18n: cached fallback language file contains invalid json`)
				else
					self:getLogger():error(`i18n: cached language file contains invalid json`)
				end

				promise:reject()
			end
		else
			self:getLogger():warning(`i18n: no cached version found`)
			promise:reject()
		end

		return promise
	end

	updateCache()
		local crc = util.CRC(self.url)
		local content = util.Base64Encode(self:getRawJson())

		file.Write(`ccr/languages/${crc}.txt`, content)
	end

	buildPhrases(tbl)
		local raw = self:getRaw()
		assert(raw, "no raw table to build phrases from")

		local copy = table.Copy(raw["phrases"])
		local flattened = CCR.FlattenTable(copy, ".", true)

		self.phrases = flattened
	end

	load()
		assert(self:getUrl(), "no url set")
		assert(self:getLogger(), "no console logger set")

		file.CreateDir(`ccr/languages`)

		local chainPromise = CCR.Promise()

		if (self:getBaseUrl()) then -- has fallback
			self.base = CCR.Language()
				:setUrl(self:getBaseUrl())
				:setLogger(self:getLogger())
			
			self.base._parent = self -- shithole way to check internally if this language object is a base of another object

			hook.Add("CCR.OnLanguageLoaded", self, (lang) ->
				if (lang == self.base) then
					chainPromise:resolve()
				end
			end)

			self.base:load()
		else
			chainPromise:resolve()
		end

		chainPromise:next(() =>
			return self:download()
		end):next((tbl) =>
			if (!tbl) then
				self:getLogger():warning(`i18n: checking for a cached version`)
				return self:loadFromCache()
			end

			self.raw = tbl
		end):next(() =>
			self:buildPhrases()
			self:updateCache()

			local name = self.raw.info?.name
			local total = table.Count(self.phrases)
			if (self._parent) then
				self:getLogger():success(`i18n: loaded fallback translation (${name:lower()})`)
			else
				self:getLogger():success(`i18n: loaded ${total} translated phrase (${name:lower()})`)

				if (self.base) then
					-- count missing phrases & merge
					local c = 0
					for phraseId, str in pairs(self.base:getPhrases()) do
						local phrase = self.phrases[phraseId]
						if (!phrase || phrase == "") then
							self.phrases[phraseId] = str
							c++
						end
					end

					if (c > 0) then
						self:getLogger():warning(`i18n: ${c} phrase(s) are not translated`, "\n", " ",
							`> Feel free to contribute here: `, Color(200, 220, 200), "https://github.com/cupcaker/ccr-languages"
						)
					end
				end
			end

			hook.Run("CCR.OnLanguageLoaded", self)
		end, () =>
			if (self._parent) then
				self:getLogger():error(`i18n: failed to load fallback translation, continuing...`)
				hook.Run("CCR.OnLanguageLoaded", self)
				self._parent.base = nil -- magic, remove ourself from our parent, prevent it from using us in a loop, brainfuck
			else
				self:getLogger():error(`i18n: failed to load translation`)
			end
		end)
	end

	__tostring() return `CCR.Language` end
end

-- auto refresh
for id, _ in pairs(hook.GetTable()["CCR.OnLanguageLoaded"] || {}) do
	hook.Remove("CCR.OnLanguageLoaded", id)
end

-- auto refresh
CCR.CanInitializeLanguage ||= false
if (!CCR.CanInitializeLanguage) then
	hook.Add("Think", "CCR.DoInitializeLanguage", () =>
		CCR.CanInitializeLanguage = true

		hook.Run("CCR.DoInitializeLanguage")
		hook.Remove("Think", "CCR.DoInitializeLanguage")
	end)
end