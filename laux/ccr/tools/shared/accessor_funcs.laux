

local function is_nil_null(value)
	return value == NULL || value == nil
end

local types = {
	["table"] = {
		check = (v) => return istable(v) end
	},
	["number"] = {
		check = (v) => return isnumber(v) end,
		convert = (v) => return tonumber(v) end
	},
	["integer"] = {
		check = (v) => return
			(tonumber(v)) &&
			tonumber(v) == math.floor(tonumber(v))
		end
	},
	["bool"] = {
		check = (v) => return isbool(v) end,
		convert = (v) => return tobool(v) end
	},
	["string"] = {
		check = (v) => return isstring(v) end,
		convert = (v) => return tostring(v) end
	},
	["entity"] = {
		check = (v) => return isentity(v) end,
	},
	["player"] = {
		check = (v) => return isentity(v) && v:IsPlayer() end,
	},
	["vector"] = {
		check = (v) => return isvector(v) end,
	},
	["angle"] = {
		check = (v) => return isangle(v) end,
	},
	["material"] = {
		check = (v) => return type(v) == "IMaterial" end,
	},
	["color"] = {
		check = (v) => return IsColor(v) end,
	},
	["panel"] = {
		check = (v) => return ispanel(v) end,
	},
	["function"] = {
		check = (v) => return isfunction(v) end,
	}
}

local aliases = {
	["boolean"] = "bool",
}

function CCR:AccessorFunc(object, key, name, forceType, canBeNil, default, serializable = true)
	object["Set" .. name] = (s, value) =>
		if (forceType) then
			forceType = forceType:lower()
			forceType = aliases[forceType] || forceType

			local typeTable = types[forceType]
			assert(typeTable, `Invalid accessor function type "${forceType}"!`)

			local funcCheck = typeTable.check
			local funcConvert = typeTable.convert

			local bCheck = funcCheck(value)
			if (canBeNil && is_nil_null(value)) then
				value = value
			else
				if (bCheck) then
					value = value
				elseif (funcConvert) then
					value = funcConvert(value)
					assert(value, "Convert failed")
				else
					error(`Expected type "${forceType}", got "${type(value):lower()}"`)
				end
			end
		end

		s[key] = value
		return s
	end

	object["Get" .. name] = (s) =>
		return s[key]
	end

	if (object[key] == nil && default != nil) then
		object[key] = default
	end

	object._accessors = object._accessors || {}
	object._accessors[key] = {
		key = key,
		name = name,
		force_type = forceType,
		nil_null = nil_null,
		default = default,
		serializable = serializable
	}
end