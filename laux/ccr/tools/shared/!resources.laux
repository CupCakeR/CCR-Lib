
local realms = {
	["sv"] = true,
	["cl"] = true,
	["sh"] = true
}

local function getSourceInfo()
	local stack = 1
	local here = true
	local foundBefore = false

	while (true) do
		local info = debug.getinfo(stack, "S")
		if (!info && !foundBefore) then
			error("invalid debug.getinfo result, called outside of an addon?")
		end

		local isThisFile = info["short_src"]:EndsWith("!resources.lua")
		if (isThisFile) then
			foundBefore = true
		end

		if (!info["short_src"]:EndsWith("!resources.lua") && foundBefore) then
			return info
		else
			foundBefore = true
		end

		if (stack > 15) then
			error("breaking loop, preventing crash")
		end

		stack++
	end
end

function CCR:IncludeFile(fileName, realm, sourceOverride)
	assert(fileName, "Invalid fileName")

	local trace = istable(sourceOverride) && sourceOverride || getSourceInfo()
	local fileSource = trace["short_src"]
	local fileToMerge = fileSource:GetPathFromFilename()

	-- TODO: Check if fileToMerge begins with "lua/" and skip the splitting trash
	fileToMerge ..= fileName
	fileToMerge = fileToMerge:Split("lua/")
	fileToMerge = fileToMerge[2]

	assert(fileToMerge, `Failed to get path from file name "${fileSource}"`)

	local fileNameSplit = fileName:Split("/")
	fileName = fileNameSplit?[#fileNameSplit] || fileName

	if (!realm) then
		realm = fileName:sub(1, 2)
	end

	assert(realms[realm], "Invalid realm")

	if (!fileToMerge:EndsWith(".lua")) then
		fileToMerge ..= ".lua"
	end

	if (SERVER && (realm == "sh" || realm == "cl")) then
		AddCSLuaFile(fileToMerge)
	end

	local includeClient = CLIENT && realm == "cl"
	local includeServer = SERVER && realm == "sv"
	if (realm == "sh" || includeClient || includeServer) then
		return include(fileToMerge)
	end
end

function CCR:IncludeVGUI(fileName)
	return self:IncludeFile("vgui/" .. fileName, "cl", 2)
end

function CCR:IncludeRecursive(path, realmOverride, traceOverride)
	local trace = traceOverride || getSourceInfo()
	local source = trace["short_src"]

	source = source:Split("lua/")
	source = source[2]

	local files, dirs = file.Find((source:GetPathFromFilename() .. path) .. "/*", "LUA")
	for i, dir in ipairs(dirs) do
		self:IncludeRecursive(`${path}/${dir}`, realmOverride, trace)
	end

	for i, fileName in ipairs(files) do
		continueif (fileName:sub(1, 1) == "!")
		self:IncludeFile(`${path}/${fileName}`, realmOverride, trace)
	end
end

function CCR:IncludeClass(className)
	return self:IncludeFile(`classes/${className}/sh.lua`, nil)
end

function CCR:ExtendClass(_class, fileName, realm)
	print("CCR-Resources: Deprecated function, this should not have been called?!")

	assert(_class, "Invalid class")
	assert(fileName, "Invalid fileName")

	local returned = self:IncludeFile(fileName, realm)
	if (returned) then
		table.Merge(_class, returned)
	end
end