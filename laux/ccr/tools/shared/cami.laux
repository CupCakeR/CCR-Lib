
CCR.CAMI ||= {}

function CCR.CAMI.PlayerHasAccess(actor, privilege, target, extraInfo)
	local promise = CCR.Promise()

	CAMI.PlayerHasAccess(actor, privilege, (b, str) =>
		if (b) then
			promise:resolve(str)
		else
			promise:reject(str)
		end
	end, target, extraInfo)

	return promise
end

function CCR.CAMI.PlayerHasAccessInstant(actor, privilege, target, extraInfo)
	local promise = CCR.Promise()

	-- by not passing a callback, we are forcing the CAMI implementation to instantly return
	local b, reason = CAMI.PlayerHasAccess(actor, privilege, nil, target, extraInfo)
	if (b) then
		promise:resolve()
	else
		promise:reject(reason)
	end

	return promise
end

function CCR.CAMI.GetPlayersWithAccess(privilege, target, extraInfo)
	local promise = CCR.Promise()

	CAMI.GetPlayersWithAccess(privilege, (tbl) =>
		promise:resolve(tbl)
	end, target, extraInfo)

	return promise
end

function CCR.CAMI.SteamIDHasAccess(actor, privilege, target, extraInfo)
	local promise = CCR.Promise()

	CAMI.SteamIDHasAccess(actor, privilege, (b, str) =>
		if (b) then
			promise:resolve(str)
		else
			promise:reject(str)
		end
	end, target, extraInfo)

	return promise
end