
-- actual class

class Currency
	_get _set id

	constructor(id)
		assert(id)
		
		self.id = id

		return self
	end

	__type()
		return "CCR.Currency"
	end

	__tostring()
		return `CCR.Currency[${self.id}]`
	end

	add(p, amt) error("implement me") end
	get(p) error("implement me") end
	canAfford(p, amt) error("implement me") end
	format(amt) error("implement me") end

	Register()
		CCR:RegisterCurrency(self)
	end
end

function CCR.NewCurrency(name)
	return Currency(name)
end

function CCR.Currency(...)
	return Currency(...)
end

-- funcs

CCR.Currencies ||= {}

function CCR:GetCurrency(id)
	return self.Currencies[id]
end

function CCR:RegisterCurrency(currency, override)
	assert(currency.id, "Currency has no ID")

	if (!override && self.Currencies[currency.id]) then
		self.Logger:Warning(`Currency with ID ${currency.id} does already exist, skipping...`)
		return
	end

	self.Currencies[currency.id] = currency
end

-- currencies
local obj = CCR.NewCurrency("ccr_debug")
	obj.add = (p, amt) =>
		CCR.Logger:Log(`Debug curreny -> Add ${amt} - ${p:Nick()}`)
	end
	obj.get = (p) =>
		return 0
	end
	obj.canAfford = (p, amt) =>
		return true
	end
	obj.format = (amt) =>
		return `$${amt}`
	end
obj:Register()

local obj = CCR.NewCurrency("darkrp")
	obj.add = (p, amt) =>
		p:addMoney(amt)
	end
	obj.get = (p) =>
		return p:getDarkRPVar("money")
	end
	obj.canAfford = (p, amt) =>
		return p:canAfford(amt)
	end
	obj.format = (amt) =>
		return DarkRP.formatMoney(amt)
	end
obj:Register()

local obj = CCR.NewCurrency("basewars")
	obj.add = (p, amt) =>
		p:GiveMoney(amt)
	end
	obj.get = (p) =>
		return p:GetMoney()
	end
	obj.canAfford = (p, amt) =>
		return p:GetMoney() >= amt
	end
	obj.format = (amt) =>
		return (BaseWars.LANG["CURRENCY"] || "?") .. BaseWars.NumberFormat(amt)
	end
obj:Register()

local obj = CCR.NewCurrency("pointshop_1")
	obj.add = (p, amt) =>
		p:PS_SetPoints(p:PS_GetPoints() + amt)
	end
	obj.get = (p) =>
		return p:PS_GetPoints()
	end
	obj.canAfford = (p, amt) =>
		return p:PS_GetPoints() >= amt
	end
	obj.format = (amt) =>
		return string.Comma(amt) .. PS.Config.PointsName
	end
obj:Register()

local obj = CCR.NewCurrency("pointshop_2")
	obj.add = (p, amt) =>
		p:PS2_AddStandardPoints(amt)
	end
	obj.get = (p) =>
		return p.PS2_Wallet.points
	end
	obj.canAfford = (p, amt) =>
		return p.PS2_Wallet.points >= amt
	end
	obj.format = (amt) =>
		return string.Comma(amt) .. " points"
	end
obj:Register()

local obj = CCR.NewCurrency("pointshop_2_premium")
	obj.add = (p, amt) =>
		p:PS2_AddStandardPoints(amt)
	end
	obj.get = (p) =>
		return p.PS2_Wallet.premiumPoints
	end
	obj.canAfford = (p, amt) =>
		return p.PS2_Wallet.premiumPoints >= amt
	end
	obj.format = (amt) =>
		return string.Comma(amt) .. " points"
	end
obj:Register()

local obj = CCR.NewCurrency("santosrp")
	obj.add = (p, amt) =>
		p:AddMoney(amt)
	end
	obj.get = (p) =>
		return p:GetMoney()
	end
	obj.canAfford = (p, amt) =>
		return p:CanAfford(amt)
	end
	obj.format = (amt) =>
		return string.Comma("$" .. amt)
	end
obj:Register()

local obj = CCR.NewCurrency("helix")
	obj.add = (p, amt) =>
		p:GiveMoney(amt, false)
	end
	obj.get = (p) =>
		return p:getDarkRPVar("money")
	end
	obj.canAfford = (p, amt) =>
		return p:HasMoney(amt)
	end
	obj.format = (amt) =>
		return string.Comma(ix.currency.symbol .. amt)
	end
obj:Register()

local obj = CCR.NewCurrency("underdone")
	obj.add = (p, amt) =>
		if amt < 0 then
			p:RemoveItem("money", -amt)
		else
			p:AddItem("money", amt)
		end
	end
	obj.get = (p) =>
		return p.Data.Inventory["money"] || 0
	end
	obj.canAfford = (p, amt) =>
		return (p.Data.Inventory["money"] || 0) >= amt
	end
	obj.format = (amt) =>
		return '$' .. string.Comma(amt)
	end
obj:Register()

local obj = CCR.NewCurrency("brcs")
	obj.add = (p, amt) =>
		p:AddBRCS_Credits(amt)
	end
	obj.get = (p) =>
		return p:GetBRCS_Credits()
	end
	obj.canAfford = (p, amt) =>
		return p:GetBRCS_Credits() >= amt
	end
	obj.format = (amt) =>
		return BRICKSCREDITSTORE.FormatCredits(amt, true)
	end
obj:Register()

local obj = CCR.NewCurrency("mtoken")
	obj.add = (p, amt) =>
		mTokens.AddPlayerTokens(p, amt)
	end
	obj.get = (p) =>
		return mTokens.GetPlayerTokens(p)
	end
	obj.canAfford = (p, amt) =>
		return mTokens.CanPlayerAfford(p, amt)
	end
	obj.format = (amt) =>
		return amt .. (" Token" .. (amt == 1 && "s" || ""))
	end
obj:Register()

local obj = CCR.NewCurrency("glorified_banking")
	obj.add = (p, amt) =>
		stopif (CLIENT)
		GlorifiedBanking.AddPlayerBalance(p, amt)
	end
	obj.get = (p) =>
		return GlorifiedBanking.GetPlayerBalance(p)
	end
	obj.canAfford = (p, amt) =>
		return GlorifiedBanking.CanPlayerAfford(p, amt)
	end
	obj.format = (amt) =>
		return '$' .. string.Comma(amt)
	end
obj:Register()

hook.Run("CCR.PostCurrenciesLoaded")