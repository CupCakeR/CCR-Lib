
local function makeNonNestedRecursive(tblOut, key, tblIn, delimiter)
	delimiter = delimiter || "."
	for k, v in pairs(tblIn) do
		if (istable(v)) then
			local _delimiter = (key != "" && delimiter || "")
			makeNonNestedRecursive(tblOut, key .. _delimiter .. k, v)
		else
			tblOut[key .. "." .. k] = v
		end
	end
end

function CCR.FlattenTable(tbl, delimiter)
	local new = {}
	makeNonNestedRecursive(new, "", tbl, delimiter || ".")
	return new
end

local function convertTableValuesToNumbersRecursive(tbl, excludedKeys)
	for k, v in pairs(tbl) do
		continueif (excludedKeys[k])

		if (istable(v)) then
			convertTableValuesToNumbersRecursive(v, excludedKeys)
		else
			tbl[k] = tonumber(v) || v
		end
	end
end

-- TODO: base off new table to prevent possible overrides?
function CCR.ConvertTableValuesToNumbersRecursive(tbl, excludedKeys = {})
	local keys = {}
	for k, v in pairs(excludedKeys) do
		keys[isnumber(k) && v || k] = true
	end

	convertTableValuesToNumbersRecursive(tbl, keys)
end